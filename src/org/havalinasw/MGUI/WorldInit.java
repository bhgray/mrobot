/*
 * WorldInit.java
 *
 * Created on June 9, 2007, 4:10 AM
 */

package org.havalinasw.MGUI;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import java.io.File;

/**
 *
 * @author  bhgray
 */
@SuppressWarnings("serial")
public class WorldInit extends javax.swing.JPanel {
    
    /** Creates new form WorldInit */
    public WorldInit() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        worldFileLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        worldFileChooseButton = new javax.swing.JButton();
        xField = new javax.swing.JTextField();
        yField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        useMazeCheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setLayout(new java.awt.GridBagLayout());

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("World Initialization");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jLabel2, gridBagConstraints);

        worldFileLabel.setText("World file (*.kwld):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(worldFileLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jSeparator1, gridBagConstraints);

        jLabel4.setText("Columns (x dimension):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 4);
        add(jLabel4, gridBagConstraints);

        jLabel5.setText("Rows (y dimension):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        add(jLabel5, gridBagConstraints);

        worldFileChooseButton.setBackground(java.awt.Color.white);
        worldFileChooseButton.setText("Choose");
        worldFileChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                worldFileChooseButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(worldFileChooseButton, gridBagConstraints);

        xField.setColumns(5);
        xField.setText("20");
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(xField, gridBagConstraints);

        yField.setColumns(5);
        yField.setText("20");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(yField, gridBagConstraints);

        jLabel3.setText("Choose either:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jLabel3, gridBagConstraints);

        useMazeCheckBox.setText("Use a Maze");
        useMazeCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        useMazeCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        useMazeCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        useMazeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useMazeCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(useMazeCheckBox, gridBagConstraints);

        jLabel6.setText("OR a new world with specified dimensions:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jLabel6, gridBagConstraints);

    }

    private void useMazeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                
      MRobotMain.getAppInfo().setMazeFileName((String)JOptionPane.showInputDialog(
                    this,
                    "Choose a name for your new Maze",
                    "Create New Robot",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    "NewMaze"));
    }

    private void worldFileChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {
        File dir = new File(System.getProperty("user.dir") + File.separator + WORLDS_DIRECTORY);
        JFileChooser chooser = new JFileChooser(dir);
        chooser.addChoosableFileFilter(new WorldFileFilter());
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File chosenFile = chooser.getSelectedFile( );
            MRobotMain.getAppInfo().setWorldFileLocation(chosenFile.getPath( ));
            worldFileLabel.setText("World file (" + chosenFile.getName() + ")");
        } else {
            MRobotMain.getAppInfo().setWorldFileLocation(null);
            if (MRobotMain.DEBUG) {
                System.out.println("You did not choose a file.");
            }
        }
    }
 
    private class WorldFileFilter extends FileFilter {
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }
            String name = f.getName();
            String extension = name.substring(name.lastIndexOf("."), name.length());
            if (extension != null) {
                if (extension.equals("kwld"));
                return true;
            } else {
                return false;
            }
        }
        
        public String getDescription() {
            return "Karel world files";
        }
    }
    
    public int getXDimension() {
        return Integer.valueOf(xField.getText());
    }
    
    public int getYDimension() {
        return Integer.valueOf(yField.getText());
    }
    
    public boolean isMaze() {
        return useMazeCheckBox.isSelected();
    }
    
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox useMazeCheckBox;
    private javax.swing.JButton worldFileChooseButton;
    private javax.swing.JLabel worldFileLabel;
    private javax.swing.JTextField xField;
    private javax.swing.JTextField yField;

    public static final String WORLDS_DIRECTORY = "worlds";
    private String mazeFileName = null;
    
}
